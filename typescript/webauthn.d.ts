/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Config {
  RPDisplayName: string;
  RPID: string;
  RPOrigin?: string;
  RPIcon?: string;
  AttestationPreference?: string;
  AuthenticatorSelection?: AuthenticatorSelection;
  Timeout?: number;
  Debug?: boolean;
}
export interface AuthenticatorSelection {
  authenticatorAttachment?: string;
  requireResidentKey?: boolean;
  userVerification?: string;
}
export interface User {
  id: string;
  name: string;
  displayName: string;
  iconURL: string;
  credentials: Credential[];
}
export interface Credential {
  ID: string;
  PublicKey: string;
  AttestationType: string;
  Authenticator: Authenticator;
}
/**
 * Class representing the user's authenticator device.
 */
export interface Authenticator {
  AAGUID: string;
  SignCount: number;
  CloneWarning: boolean;
}
export interface CredentialCreation {
  publicKey: PublicKeyCredentialCreationOptions;
}
export interface PublicKeyCredentialCreationOptions {
  challenge: string;
  rp: RelyingPartyEntity;
  user: UserEntity;
  pubKeyCredParams?: CredentialParameter[];
  authenticatorSelection?: AuthenticatorSelection;
  timeout?: number;
  excludeCredentials?: CredentialDescriptor[];
  extensions?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      [k: string]: unknown;
    };
  };
  attestation?: string;
}
export interface RelyingPartyEntity {
  name: string;
  icon?: string;
  id: string;
}
export interface UserEntity {
  name: string;
  icon?: string;
  displayName?: string;
  id: string;
}
export interface CredentialParameter {
  type: string;
  alg: number;
}
export interface CredentialDescriptor {
  type: string;
  id: string;
  transports?: string[];
}
export interface CredentialCreationResponse {
  id: string;
  type: string;
  rawId: string;
  extensions?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      [k: string]: unknown;
    };
  };
  response: AuthenticatorAttestationResponse;
}
export interface AuthenticatorAttestationResponse {
  clientDataJSON: string;
  attestationObject: string;
}
export interface CredentialAssertion {
  publicKey: PublicKeyCredentialRequestOptions;
}
export interface PublicKeyCredentialRequestOptions {
  challenge: string;
  timeout?: number;
  rpId?: string;
  allowCredentials?: CredentialDescriptor[];
  userVerification?: string;
  extensions?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      [k: string]: unknown;
    };
  };
}
export interface CredentialAssertionResponse {
  id: string;
  type: string;
  rawId: string;
  extensions?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      [k: string]: unknown;
    };
  };
  response: AuthenticatorAssertionResponse;
}
export interface AuthenticatorAssertionResponse {
  clientDataJSON: string;
  authenticatorData: string;
  signature: string;
  userHandle?: string;
}
export interface SessionData {
  challenge: string;
  user_id: string;
  allowed_credentials?: string[];
  userVerification: string;
}
